import { Component, OnInit } from '@angular/core';


import 'phaser';
declare var f:any;

declare var Blockly: any;
import Tween = Phaser.Tweens.Tween;
import {Scene1, Scene2, Scene3} from "../../employee/employee-list/employee-list.component";
import {ActivatedRoute, Router} from "@angular/router";
import {ProgramService} from "../../program.service";
import {IProgram} from "../../models/program";
@Component({
  selector: 'app-course-list',
  templateUrl: './course-list.component.html',
  styleUrls: ['./course-list.component.css']
})
export class CourseListComponent implements OnInit {
  title: string;
  programName!: string;
  program!: IProgram;
  workspace: any;
  phaserGame: Phaser.Game;
  config: Phaser.Types.Core.GameConfig;

  constructor( private route: ActivatedRoute,
               private programService: ProgramService,

               private router: Router) {

    this.config = {
      type: Phaser.AUTO,
      width: 800, // Width of the game in pixels
      height: 550, // Height of the game in pixels
      // The background color (blue)

      scene: [Scene], // The name of the scene we created
      physics: { default: 'arcade' }, // The physics engine to use
    };

    this.phaserGame = new Phaser.Game(this.config  );
    this.title = 'Create Visual Program';
    this.route.params.subscribe(params => {
      this.programName = params['programName'];
      this.program = this.programService.getOne(this.programName);
      if (!this.program) {
        this.program = {
          name: this.programName,
          xmlData: null as any
        };
      }
      console.log(
        'creating/editing the program - ',
        JSON.stringify(this.program)
      );
    });
  }



  ngOnInit(): void {
    this.workspace = Blockly.inject('blocklyDiv', {
      toolbox: document.getElementById('toolbox'),
      scrollbars: false
    });  if (this.program.xmlData) {
      this.workspace.clear();
      Blockly.Xml.domToWorkspace(
        Blockly.Xml.textToDom(this.program.xmlData),
        this.workspace
      );
    }
    new f();
  }
  saveProgram(): void {
    this.program.xmlData = Blockly.Xml.domToText(
      Blockly.Xml.workspaceToDom(this.workspace)
    );
    console.log('saving the program - ', JSON.stringify(this.program));
    this.programService.upsertOne(this.program);
    this.router.navigate(['listProgram']);
  }
}


export  class Scene extends Phaser.Scene {

  constructor() {
    super('text')
  }
  preload() {

  }
  create() {

  }



  update() {


  }


  goNext(){
    console.log('goNext');
  }
  retry(){
    console.log('retry');
  }

}




















import { Component, OnInit } from '@angular/core';
import * as Blockly from 'ngx-blockly';

import {
  NgxBlocklyConfig,
  NgxBlocklyGeneratorConfig,
  NgxBlocklyToolbox,
  CustomBlock,
  Button,
  Label,
  Category,
  COLOUR_CATEGORY,
  NgxToolboxBuilderService,
  LOGIC_CATEGORY,
  LOOP_CATEGORY,
  TEXT_CATEGORY,
  MATH_CATEGORY,
  Separator,
  LISTS_CATEGORY,
  VARIABLES_CATEGORY,
  FUNCTIONS_CATEGORY,
} from 'ngx-blockly';
import { TestBlock } from '../test-block';

@Component({
  selector: 'app-blockly',
  templateUrl: './blockly.component.html',
  styleUrls: ['./blockly.component.css'],
})
export class BlocklyComponent implements OnInit {
  constructor(ngxToolboxBuilder: NgxToolboxBuilderService) {
    ngxToolboxBuilder.nodes = [
      this.customCategory,
      LOGIC_CATEGORY,
      LOOP_CATEGORY,
      MATH_CATEGORY,
      TEXT_CATEGORY,
      new Separator(), //Add Separator
      LISTS_CATEGORY,
      COLOUR_CATEGORY,
      VARIABLES_CATEGORY,
      FUNCTIONS_CATEGORY,
    ];
    this.config.toolbox = ngxToolboxBuilder.build();
  }

  ngOnInit(): void {}
  public config: NgxBlocklyConfig = {
    toolbox:
      '<xml id="toolbox" style="display: none">' +
      '<block type="controls_if"></block>' +
      '<block type="controls_repeat_ext"></block>' +
      '<block type="logic_compare"></block>' +
      '<block type="math_number"></block>' +
      '<block type="math_arithmetic"></block>' +
      '<block type="text"></block>' +
      '<block type="text_print"></block>' +
      '</xml>',
    scrollbars: true,
    trashcan: true,
    comments: true,
    plugins: {
      toolbox: NgxBlocklyToolbox,
    },
  };

  // ...

  public generatorConfig: NgxBlocklyGeneratorConfig = {
    javascript: true,
    xml: true,
  };

  onCode(code: string) {
    console.log(code);
    console.log('ah ynkta lcode');
  }

  public customBlocks: CustomBlock[] = [new TestBlock()];

  // https://developers.google.com/blockly/guides/configure/web/toolbox#xml_12
  public buttons: Button[] = [new Button('NewButton', 'CallbackKey')];

  public labels: Label[] = [new Label('NewLabel', 'web-class')];

  public customCategory = new Category('MyCategory', '#FF00FF', [
    ...this.buttons,
    ...this.customBlocks,
    ...this.labels,
  ]);
}



























export class BlocklyComponent implements AfterViewInit {
  ngAfterViewInit(): void {
    const toolbox = `
<xml xmlns="https://developers.google.com/blockly/xml" id="toolbox" style="display: none">
  <block type="controls_if"></block>
  <block type="logic_compare"></block>
  <block type="controls_repeat_ext"></block>
  <block type="math_number">
    <field name="NUM">123</field>
  </block>
  <block type="math_arithmetic"></block>
  <block type="text"></block>
  <block type="text_print"></block>
</xml>


`;


    var demoWorkspace = Blockly.inject('blocklyDiv',
      {media: '../../media/',
        toolbox: document.getElementById('toolbox')});



   // Blockly.inject('blocklyDiv', { toolbox });
  //  var workspace = Blockly.inject('blocklyDiv',
    //  {toolbox: document.getElementById('toolbox')});

  }



}


















































/**
 * @license
 * Copyright 2012 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Blocks for Maze game.
 * @author fraser@google.com (Neil Fraser)
 */
import { Component, OnInit } from '@angular/core';
import * as Blockly from 'blockly';
import 'phaser';

import {GameOver, Scene1, Scene2, Scene3} from "../employee/employee-list/employee-list.component";
import block = Blockly.Tooltip.block;
import visible = Blockly.Tooltip.visible;

var i=0;
var m ="";

//import any = jasmine.any;
//import closure = require('./node_modules/closure-library.ts/index');
@Component({
  selector: 'app-blockly',
  templateUrl: './blockly.component.html',
  styleUrls: ['./blockly.component.css']
})

export class BlocklyComponent  implements OnInit {
  workspace: any;


  phaserGame: Phaser.Game;
  config: Phaser.Types.Core.GameConfig;
  constructor() {
    this.config = {
      type: Phaser.AUTO,
      width: 800, // Width of the game in pixels
      height: 550, // Height of the game in pixels
      // The background color (blue)

      scene: [Scene4,GameOver,Scene5], // The name of the scene we created
      physics: { default: 'arcade' }, // The physics engine to use
    };

    this.phaserGame = new Phaser.Game(this.config  );

  }


  ngOnInit() : void{



  }




}






export  class Scene4 extends Phaser.Scene {
  go:any;
  ok:any;
  cod:any;
  i:number=0;
  workspace:any;
  up:any;
  score1:any;
  lettuce:any;
  score:any;
  run:any;
  drop:any;
  arrow:any;
  arrowA:any;
  arrow2:any;
  arrow3:any;
  arrow4:any;
  player:any;
  player2:any;

  scoreText:any;
  right2:any;
  right3:any;


 l !:BlocklyComponent;

  constructor() {
    super('game4')

  }
  preload() {


    Blockly.Blocks['string_length'] = {
      init: function() {
        this.appendValueInput('VALUE')
          .setCheck('String')
          .appendField('length of');
        this.setOutput(true, 'Number');
        this.setColour(280);
        //this.setNextStatement(true);
        this.setTooltip('Returns number of letters in the provided text.');
        this.setHelpUrl('http://www.w3schools.com/jsref/jsref_length_string.asp');
      }
    };
    Blockly.Blocks['gridworld_gonorth'] = {
      init: function () {
        this.setColour(320);
        this.appendDummyInput()
          .appendField('Go east');
        this.setTooltip('Move right (towards the top of the screen)');
        this.setNextStatement(true);
        this.setPreviousStatement(true);
      }
    };
    Blockly.Blocks['gowest'] = {
      init: function () {
        this.setColour(320);
        this.appendDummyInput()
          .appendField('Go west');
        this.setTooltip('Move right (towards the top of the screen)');
        this.setNextStatement(true);
        this.setPreviousStatement(true);
      }
    };
    Blockly.Blocks['gridworld_gosouth'] = {
      init: function () {
        this.setColour(320);
        this.appendDummyInput()
          .appendField('Go north');
        this.setTooltip('Move south (towards the bottom of the screen)');
        this.setNextStatement(true);
        this.setPreviousStatement(true);
      }
    };
    Blockly.Blocks['goForword'] = {
      init: function () {
        this.setColour(320);
        this.appendDummyInput()
          .appendField('Go south');
        this.setTooltip('Move south (towards the bottom of the screen)');
        this.setNextStatement(true);
        this.setPreviousStatement(true);
      }
    };
    Blockly.Blocks['turn'] = {
      init: function() {
        this.appendDummyInput()
          .appendField(new Blockly.FieldLabelSerializable("turn"), "NAME")
          .appendField(new Blockly.FieldDropdown([["left","turnLeft"], ["right","turn right"]]), "turn");
        this.setColour(230);
        this.setTooltip("");
        this.setHelpUrl("");
      }
    };

    (Blockly as any).JavaScript['gridworld_gonorth'] = function (block ) {



      return 'GoEast();';
    };
    (Blockly as any).JavaScript['gowest'] = function (block ) {



      return 'gowest();';
    };
    (Blockly as any).JavaScript['goForword'] = function (block ) {



      return 'goSouth;';
    };

    (Blockly as any).JavaScript['turn'] = function (block ) {



      return 'turn();';
    };

    (Blockly as any).JavaScript['gridworld_gosouth'] = function (block) {



      return 'GoNorth();';
    };















    const blocklyDiv : any = document.getElementById('blocklyDiv');

    this.workspace=  Blockly.inject(blocklyDiv, {
      readOnly: false,
      media: 'media/',
      trashcan: true,
      move: {
        scrollbars: true,
        drag: true,
        wheel: true
      },
      toolbox: `
      <xml xmlns="https://developers.google.com/blockly/xml" id="toolbox-simple" style="display: none" class="col-6">
        <div class="col-6"></div>


        <block type="gridworld_gosouth"></block>
        <block type="goForword"></block>
        <block type="gowest"></block>
        <block type="gridworld_gonorth"></block>

      </xml>
        `, zoom:
        {controls: true,
          wheel: true,
          startScale: 1.0,
          maxScale: 3,
          minScale: 0.3,
          scaleSpeed: 1.2,
        },
      grid:
        {spacing: 20,
          length: 3,
          colour: '#ccc',
          snap: true},

    } );
    this.workspace.addChangeListener(this.test1);

    this.load.image('sahara', 'assets/tileset.jpg');
    this.load.image('player', 'assets/face.png');
    this.load.image('player2', 'assets/left.png');
    this.load.image('playerWest', 'assets/right.png');
    this.load.image('playerNorth', 'assets/back.png');
    this.load.image('happy', 'assets/hqppy.png');
    this.drop= this.load.image('drop', 'assets/drop.png');
    this.arrow=this.load.image('right', 'assets/arrow.png');
    this.arrow2=this.load.image('down', 'assets/arrowDown.png');
    this.arrow3=this.load.image('left', 'assets/arrowleft.png');
    this.arrow4=this.load.image('up', 'assets/arrowUp.png');
    this.load.image('title', 'assets/title.png');
    this.load.image('run', 'assets/run.png');
    this.load.image('score1', 'assets/score.png');
    this.load.image('block', 'assets/block.png');
    this.load.image('blockk', 'assets/blockk.png');
    this.load.image('compass', 'assets/compass.png');
    this.load.image('lettuce', 'assets/goldA.png');



  }
  create() {

    this.arrowA = this.input.keyboard.createCursorKeys();
    this.anims.create({

      frames: this.anims.generateFrameNumbers('brawler', { frames: [ 0, 1, 2, 3 ] }),
      frameRate: 8,
      repeat: -1
    });
    //this.add.text(20, 20, 'Loading..');
    const  event = Phaser.Input.Events;

    const sahara = this.add.image( 350,  380, 'sahara');
    sahara.scale = 1.5;
    const sahara2 = this.add.image( 350,  240, 'sahara');
    sahara2.scale = 1.5;
    this.player = this.physics.add.sprite(350, 76, 'player');
    this.player.scale = 1.7;
    var that= this;

    const compass =this.add.image( 690,  50, 'compass');
    compass.scale = 0.25;

    this.lettuce = this.physics.add.sprite(350, 310, 'lettuce');
    this.lettuce.setScale(.4);
    this.tweens.add({
      targets: this.lettuce, // on the player
      duration: 400, // for 200ms
      scaleX: .3, // that scale vertically by 20%
      scaleY: .3, // and scale horizontally by 20%
      yoyo: true, // at the end, go back to original scale
    });
    var b=[] as any;

    const run= this.physics.add.sprite(730, 500, 'run').setInteractive();

    run.scale = 0.25;
    run.on(event.POINTER_DOWN ,(image) => {


const str= document.getElementById('code')!.innerHTML;
//console.log("document is :"+str);
       b = str.split(";");
      for (let j=0;j<b.length-1;j++){
        console.log("elemnt is : "+ b[j])
      }
      this.test(b);


    });

    this.score1 = this.physics.add.sprite(60, 60, 'score1');

    this.score1.setScale(0.2);

    this.score = 0;
    let style = { font: '30px Arial', fill: '#00000' };
    // Parameters: x position, y position, text, style
    this.scoreText = this.add.text(45, 54,   this.score, style);

    this.scoreText.setScale(0.85);


  }

  getname(){

  }
  correct(b){
    if (b[0]=="goSouth" && b[1]=="goSouth"  ){
      this.time.addEvent({
        delay:500,
        callback : this.gameOver,
        callbackScope : this
      });

    }else {
      this.scene.launch('gameOver', {score: this.score,name:"gameLose"});

    }
  }
  hit(){
    // Change the position x and y of the coin randomly
    // this.lettuce.x = Phaser.Math.Between(100, 600);
    //this.lettuce.y = Phaser.Math.Between(100, 300);
    this.lettuce.destroy(true);
   // this.player.destroy(true);
    // Increment the score by 10
    this.score += 10;
   // this.player2 = this.physics.add.sprite(500, 338, 'happy');
    //this.player2.scale = 0.3;

    // Display the updated score on the screen
    this.scoreText.setText( this.score);

    // Create a new tween Ykbr ki yakol
    this.tweens.add({
      targets: this.player, // on the player
      duration: 200, // for 200ms
      scaleX: 0.5, // that scale vertically by 20%
      scaleY: 0.5, // and scale horizontally by 20%
      yoyo: true, // at the end, go back to original scale
    });
  }

  walkNorth(){

    console.log('going north');
  }


  goEast(){
    this.player.x += 70;

    console.log("done go");}
  upfunction(){
    this.player.y -= 70;
    console.log("done go");}

  waitfunction(ms){

    return new Promise(resolve => {
      setTimeout(()=>resolve(''),ms)
    });
  }

  async  move1(){
    this.player.x = 357;
    await this.waitfunction(50);
    this.player.x = 350;

  }
  async  move2(){
    this.player.x = 343;
    await this.waitfunction(50);
    this.player.x = 347;

  }
  async  move3(){
    this.player.y = 73 ;
    await this.waitfunction(50);
    this.player.y = 76;

  }

  async test(myArr){

    console.log(myArr.length);

    //for (let j=0;j<myArr.length-1;j++){
    for (let j=0;j<2;j++){

      await this.waitfunction(500);

      console.log(myArr[j]);
      if (myArr[j]=='GoEast()'){
       // this.lettuce.destroy(true);
        var x= this.player.x;
        var y= this.player.y;
        this.player.destroy(true);
        // Increment the score by 10
        // this.score += 10;


        this.player = this.physics.add.sprite(x, y, 'player2');
        this.player.scale = 1.7;
        this.goEast();

      }
      if (myArr[j]=='goSouth'){
        var x= this.player.x;
        var y= this.player.y;
        this.player.destroy(true);
        this.player = this.physics.add.sprite(x, y, 'player');
        this.player.scale = 1.7;

        this.player.y += 70;

      }
      if (myArr[j]=='gowest()'){

        var x= this.player.x;
        var y= this.player.y;
        this.player.destroy(true);
        this.player = this.physics.add.sprite(x, y, 'playerWest');
        this.player.scale = 1.7;
        this.player.x -= 70;
      }
      if (myArr[j]=='turn()'){
        this.goEast();
      }
      else if (myArr[j]=='GoNorth()'){
        var x= this.player.x;
        var y= this.player.y;
        this.player.destroy(true);
        this.player = this.physics.add.sprite(x, y, 'playerNorth');
        this.player.scale = 1.7;
        this.upfunction()}
      console.log("listner"+j)
    }
    await this.waitfunction(500);

    this.correct(myArr);

    //this.scene.start('game1')
  }
  async wait(ms){
    await this.waitfunction(ms);
  }

  update() {
    console.log('update method');
    if (this.player.x < 0) {
      this.player.x = 0;
    }

    if (this.player.x > 700) {
      this.player.x = 700;
    }
    if (this.player.x > 350) {
      this.move1()
    }
    if (this.player.x < 345) {
      this.move2()
    }
    if (this.player.y < 0) {
      this.player.y = 0;
    }
    if (this.player.y > 550) {
      this.player.y = 548 ;
    }if (this.player.y < 76) {
    this.move3()

    }


    if (this.arrowA.right.isDown) {
      // If the right arrow is pressed, move to the right
      this.player.x += 3;
      console.log(this.player.x+" y is : "+ this.player.y)
    } else if (this.arrowA.left.isDown) {
      // If the left arrow is pressed, move to the left
      this.player.x -= 3;
    }

// Do the same for vertical movements
    if (this.arrowA.down.isDown) {
      this.player.y += 3;
    } else if (this.arrowA.up.isDown) {
      this.player.y -= 3;
    }
    if (this.physics.overlap(this.player, this.lettuce)) {
      // Call the new hit() method
      console.log("hitted");
      this.hit();

    }
    }

  test1(event ) {

    // (Blockly as any).JavaScript.addReservedWords('code');
    var code= (Blockly as any).JavaScript.workspaceToCode(Blockly.mainWorkspace);
    // var myInterpreter = new Interpreter(code);
    document.getElementById('code')!.innerHTML = code;

    console.log(code);


  }
  gameOver(){
    //hide elements
    //this.scoreText.setVisible(false);
    //this.score.setVisible(false);
    // score
    //show game over scene as overlay
    //this.score1.setVisible(false);
    //this.scoreText.setVisible(false);
   // this.run.setVisible(false);
    this.scene.launch('gameOver', {score: this.score,name:"game4"});

    // let panel = this.scene.get('gamrOver');

    //listen to events from the game over
    //panel.events.on('goNext',this.goNext, this);
    //panel.events.on('retry',this.retry, this);
  }
  closeGameOve(){
    this.scene.stop('gameOver');
  }



}





//Loop
export  class Scene5 extends Phaser.Scene {
  go:any;
  ok:any;
  cod:any;
  i:number=0;
  workspace:any;
  up:any;
  score1:any;
  lettuce:any;
  score:any;
  run:any;
  drop:any;
  arrow:any;
  arrowA:any;
  arrow2:any;
  arrow3:any;
  arrow4:any;
  player:any;
  player2:any;

  scoreText:any;
  right2:any;
  right3:any;


  l !:BlocklyComponent;

  constructor() {
    super('repeat')

  }
  preload() {


    Blockly.Blocks['string_length'] = {
      init: function() {
        this.appendValueInput('VALUE')
          .setCheck('String')
          .appendField('length of');
        this.setOutput(true, 'Number');
        this.setColour(280);
        //this.setNextStatement(true);
        this.setTooltip('Returns number of letters in the provided text.');
        this.setHelpUrl('http://www.w3schools.com/jsref/jsref_length_string.asp');
      }
    };
    Blockly.Blocks['gridworld_gonorth'] = {
      init: function () {
        this.setColour(320);
        this.appendDummyInput()
          .appendField('Go east');
        this.setTooltip('Move right (towards the top of the screen)');
        this.setNextStatement(true);
        this.setPreviousStatement(true);
      }
    };
    Blockly.Blocks['gowest'] = {
      init: function () {
        this.setColour(320);
        this.appendDummyInput()
          .appendField('Go west');
        this.setTooltip('Move right (towards the top of the screen)');
        this.setNextStatement(true);
        this.setPreviousStatement(true);
      }
    };
    Blockly.Blocks['gridworld_gosouth'] = {
      init: function () {
        this.setColour(320);
        this.appendDummyInput()
          .appendField('Go north');
        this.setTooltip('Move south (towards the bottom of the screen)');
        this.setNextStatement(true);
        this.setPreviousStatement(true);
      }
    };
    Blockly.Blocks['goForword'] = {
      init: function () {
        this.setColour(320);
        this.appendDummyInput()
          .appendField('Go south');
        this.setTooltip('Move south (towards the bottom of the screen)');
        this.setNextStatement(true);
        this.setPreviousStatement(true);
      }
    };
    Blockly.Blocks['turn'] = {
      init: function() {
        this.appendDummyInput()
          .appendField(new Blockly.FieldLabelSerializable("turn"), "NAME")
          .appendField(new Blockly.FieldDropdown([["left","turnLeft"], ["right","turn right"]]), "turn");
        this.setColour(230);
        this.setTooltip("");
        this.setHelpUrl("");
      }
    };

    (Blockly as any).JavaScript['gridworld_gonorth'] = function (block ) {



      return 'GoEast();';
    };
    (Blockly as any).JavaScript['gowest'] = function (block ) {



      return 'gowest();';
    };
    (Blockly as any).JavaScript['goForword'] = function (block ) {



      return 'this.goSouth();';
    };

    (Blockly as any).JavaScript['turn'] = function (block ) {



      return 'turn();';
    };

    (Blockly as any).JavaScript['gridworld_gosouth'] = function (block) {



      return 'GoNorth();';
    };















    const blocklyDiv : any = document.getElementById('div2');
    this.workspace=  Blockly.inject(blocklyDiv, {
      readOnly: false,
      media: 'media/',
      trashcan: true,
      move: {
        scrollbars: true,
        drag: true,
        wheel: true
      },
      toolbox: `
      <xml xmlns="https://developers.google.com/blockly/xml" id="toolbox-simple" style="display: none" class="col-6">
        <div class="col-6"></div>


        <block type="gridworld_gosouth"></block>
        <block type="goForword"></block>
        <block type="gowest"></block>
        <block type="gridworld_gonorth"></block>
        <block type="text_length"></block>

        <block type="controls_for"></block>
        <block type="controls_repeat_ext"></block>
          <block type="math_number">
    <field name="NUM"></field>
  </block>
 <block type="text"></block>
  <block type="text_print"></block>





      </xml>
        `, zoom:
        {controls: true,
          wheel: true,
          startScale: 1.0,
          maxScale: 3,
          minScale: 0.3,
          scaleSpeed: 1.2,
        },
      grid:
        {spacing: 20,
          length: 3,
          colour: '#ccc',
          snap: true},

    } );
    this.workspace.addChangeListener(this.test1);

    this.load.image('sahara', 'assets/tileset.jpg');
    this.load.image('player', 'assets/face.png');
    this.load.image('player2', 'assets/left.png');
    this.load.image('playerWest', 'assets/right.png');
    this.load.image('playerNorth', 'assets/back.png');
    this.load.image('happy', 'assets/hqppy.png');
    this.drop= this.load.image('drop', 'assets/drop.png');
    this.arrow=this.load.image('right', 'assets/arrow.png');
    this.arrow2=this.load.image('down', 'assets/arrowDown.png');
    this.arrow3=this.load.image('left', 'assets/arrowleft.png');
    this.arrow4=this.load.image('up', 'assets/arrowUp.png');
    this.load.image('title', 'assets/title.png');
    this.load.image('run', 'assets/run.png');
    this.load.image('lettuce', 'assets/goldA.png');
    this.load.image('score1', 'assets/score.png');
    this.load.image('block', 'assets/block.png');
    this.load.image('blockk', 'assets/blockk.png');
    this.load.image('compass', 'assets/compass.png');



  }
  create() {
    this.closeGameOve();

    this.arrowA = this.input.keyboard.createCursorKeys();
    this.anims.create({

      frames: this.anims.generateFrameNumbers('brawler', { frames: [ 0, 1, 2, 3 ] }),
      frameRate: 8,
      repeat: -1
    });
    //this.add.text(20, 20, 'Loading..');
    const  event = Phaser.Input.Events;

    const sahara = this.add.image( 350,  380, 'sahara');
    sahara.scale = 1.5;
    const sahara2 = this.add.image( 350,  240, 'sahara');
    sahara2.scale = 1.5;
    this.player = this.physics.add.sprite(350, 76, 'player');
    this.player.scale = 1.7;
    var that= this;
    const compass =this.add.image( 690,  50, 'compass');
    compass.scale = 0.25;
    this.lettuce = this.physics.add.sprite(350, 310, 'lettuce');
    this.lettuce.setScale(.4);
    this.tweens.add({
      targets: this.lettuce, // on the player
      duration: 400, // for 200ms
      scaleX: .3, // that scale vertically by 20%
      scaleY: .3, // and scale horizontally by 20%
      yoyo: true, // at the end, go back to original scale
    });
    var b=[] as any;

    const run= this.physics.add.sprite(730, 500, 'run').setInteractive();

    run.scale = 0.25;

    run.on(event.POINTER_DOWN ,(image) => {

   eval(document.getElementById('code').innerHTML
    );

console.log("running" )

    });

    this.score1 = this.physics.add.sprite(60, 60, 'score1');

    this.score1.setScale(0.2);

    this.score = 0;
    let style = { font: '30px Arial', fill: '#00000' };
    // Parameters: x position, y position, text, style
    this.scoreText = this.add.text(45, 54,   this.score, style);

    this.scoreText.setScale(0.85);


  }

  getname(){

  }
  correct(b){
    if (b[0]=="goSouth" && b[1]=="goSouth"  ){
      this.time.addEvent({
        delay:500,
        callback : this.gameOver,
        callbackScope : this
      });

    }else {
      this.scene.launch('gameOver', {score: this.score,name:"gameLose"});

    }
  }
  hit(){
    // Change the position x and y of the coin randomly
    // this.lettuce.x = Phaser.Math.Between(100, 600);
    //this.lettuce.y = Phaser.Math.Between(100, 300);
    this.lettuce.destroy(true);
    // this.player.destroy(true);
    // Increment the score by 10
    this.score += 10;
    // this.player2 = this.physics.add.sprite(500, 338, 'happy');
    //this.player2.scale = 0.3;

    // Display the updated score on the screen
    this.scoreText.setText( this.score);

    // Create a new tween Ykbr ki yakol
    this.tweens.add({
      targets: this.player, // on the player
      duration: 200, // for 200ms
      scaleX: 0.5, // that scale vertically by 20%
      scaleY: 0.5, // and scale horizontally by 20%
      yoyo: true, // at the end, go back to original scale
    });
  }

  walkNorth(){

    console.log('going north');
  }

  goSouth(){
    this.player.y += 70;

  }
  goEast(){
    this.player.x += 70;

    console.log("done go");}
  upfunction(){
    this.player.y -= 70;
    console.log("done go");}

  waitfunction(ms){

    return new Promise(resolve => {
      setTimeout(()=>resolve(''),ms)
    });
  }

  async  move1(){
    this.player.x = 357;
    await this.waitfunction(50);
    this.player.x = 350;

  }
  async  move2(){
    this.player.x = 343;
    await this.waitfunction(50);
    this.player.x = 347;

  }
  async  move3(){
    this.player.y = 73 ;
    await this.waitfunction(50);
    this.player.y = 76;

  }


  async test(myArr){

    console.log(myArr.length);

    //for (let j=0;j<myArr.length-1;j++){
    for (let j=0;j<2;j++){

      await this.waitfunction(500);

      console.log(myArr[j]);
      if (myArr[j]=='GoEast()'){
        // this.lettuce.destroy(true);
        var x= this.player.x;
        var y= this.player.y;
        this.player.destroy(true);
        // Increment the score by 10
        // this.score += 10;


        this.player = this.physics.add.sprite(x, y, 'player2');
        this.player.scale = 1.7;
        this.goEast();

      }
      if (myArr[j]=='goSouth'){
        var x= this.player.x;
        var y= this.player.y;
        this.player.destroy(true);
        this.player = this.physics.add.sprite(x, y, 'player');
        this.player.scale = 1.7;

        this.player.y += 70;

      }
      if (myArr[j]=='gowest()'){

        var x= this.player.x;
        var y= this.player.y;
        this.player.destroy(true);
        this.player = this.physics.add.sprite(x, y, 'playerWest');
        this.player.scale = 1.7;
        this.player.x -= 70;
      }
      if (myArr[j]=='turn()'){
        this.goEast();
      }
      else if (myArr[j]=='GoNorth()'){
        var x= this.player.x;
        var y= this.player.y;
        this.player.destroy(true);
        this.player = this.physics.add.sprite(x, y, 'playerNorth');
        this.player.scale = 1.7;
        this.upfunction()}
      console.log("listner"+j)
    }
    await this.waitfunction(500);

    this.correct(myArr);

    //this.scene.start('game1')
  }
  async wait(ms){
    await this.waitfunction(ms);
  }

  update() {
    console.log('update method');
    if (this.player.x < 0) {
      this.player.x = 0;
    }

    if (this.player.x > 700) {
      this.player.x = 700;
    }
    if (this.player.x > 350) {
      this.move1()
    }
    if (this.player.x < 345) {
      this.move2()
    }
    if (this.player.y < 0) {
      this.player.y = 0;
    }
    if (this.player.y > 550) {
      this.player.y = 548 ;
    }if (this.player.y < 76) {
      this.move3()

    }


    if (this.arrowA.right.isDown) {
      // If the right arrow is pressed, move to the right
      this.player.x += 3;
      console.log(this.player.x+" y is : "+ this.player.y)
    } else if (this.arrowA.left.isDown) {
      // If the left arrow is pressed, move to the left
      this.player.x -= 3;
    }

// Do the same for vertical movements
    if (this.arrowA.down.isDown) {
      this.player.y += 3;
    } else if (this.arrowA.up.isDown) {
      this.player.y -= 3;
    }
    if (this.physics.overlap(this.player, this.lettuce)) {
      // Call the new hit() method
      console.log("hitted");
      this.hit();

    }
  }

  test1(event ) {

    // (Blockly as any).JavaScript.addReservedWords('code');
    var code= (Blockly as any).JavaScript.workspaceToCode(Blockly.mainWorkspace);
    // var myInterpreter = new Interpreter(code);
    document.getElementById('code')!.innerHTML = code;

    console.log(code);


  }
  gameOver(){
    //hide elements
    //this.scoreText.setVisible(false);
    //this.score.setVisible(false);
    // score
    //show game over scene as overlay
    //this.score1.setVisible(false);
    //this.scoreText.setVisible(false);
    // this.run.setVisible(false);
    this.scene.launch('gameOver', {score: this.score,name:"game4"});

    // let panel = this.scene.get('gamrOver');

    //listen to events from the game over
    //panel.events.on('goNext',this.goNext, this);
    //panel.events.on('retry',this.retry, this);
  }
  closeGameOve(){
    this.scene.stop('game4');
  }






}
export  class over extends Phaser.Scene {
constructor() {
  super('ov');

}


}


















import {AfterViewInit, Component, OnInit,ViewChild} from '@angular/core';
import { NgxBlocklyGeneratorConfig} from "ngx-blockly";
import {NgxBlocklyConfig} from "../../../../projects/ngx-blockly/src/lib/ngx-blockly/ngx-blockly.config";




@Component({
  selector: 'app-course-list',
  templateUrl: './course-list.component.html',
  styleUrls: ['./course-list.component.css']
})
export class CourseListComponent implements OnInit{

  public config: NgxBlocklyConfig = {
    toolbox: '<xml id="toolbox" style="display: none">' +

      '<block type="controls_if"></block>' +
      '<block type="play_sound"></block>' +


      '<block type="controls_repeat_ext"></block>' +
      '<block type="logic_compare"></block>' +
      '<block type="math_number"></block>' +
      '<block type="math_arithmetic"></block>' +
      '<block type="text"></block>' +
      '<block type="text_print"></block>' +
      '</xml>',
    scrollbars: true,
    trashcan: true
  };

  public generatorConfig: NgxBlocklyGeneratorConfig = {
    dart: true,
    javascript: true,
    lua: true,
    php: true,
    python: true,
  };

  onCode(code: string) {
    console.log(code);
  }

  ngOnInit(): void {
  }




}












































import { Component, OnInit, Injectable } from '@angular/core';
import * as Blockly from 'blockly';
import { Pahsertoblockly } from '../pahsertoblockly';

@Component({
  selector: 'app-testblock',
  templateUrl: './testblock.component.html',
  styleUrls: ['./testblock.component.css'],
})
export class TestblockComponent extends Phaser.Scene implements OnInit {
  phaserGame: Phaser.Game;
  instance: any;

  player;
  config: Phaser.Types.Core.GameConfig;
  constructor(public project: Pahsertoblockly) {
    super({ key: 'main' });

    this.config = {
      type: Phaser.AUTO,
      height: 400,
      width: 400,
      scene: [Pahsertoblockly],
      parent: 'gameContainer',
      physics: {
        default: 'arcade',
        arcade: {
          gravity: { y: 500 },
          debug: false,
        },
      },
    };
  }
  workspace: any;

  ngOnInit() {
    const blocklyDiv = document.getElementById('blocklyDiv');
    this.phaserGame = new Phaser.Game(this.config);

    Blockly.Blocks.moveForward = {
      init() {
        this.appendDummyInput().appendField('MoveForward');
        this.setInputsInline(false);
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setColour(290);
        this.setTooltip('');
        this.setHelpUrl('');
      },
    };

    Blockly.Blocks.moveBackward = {
      init() {
        this.appendDummyInput().appendField('MoveBackward');
        this.setInputsInline(false);
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setColour(290);
        this.setTooltip('');
        this.setHelpUrl('');
      },
    };
    Blockly.Blocks.turn = {
      init() {
        this.appendDummyInput()
          .appendField('Turn')
          .appendField(
            new Blockly.FieldDropdown([
              ['right', 'right'],
              ['left', 'left'],
              ['', ''],
            ]),
            'NAME'
          );
        this.setInputsInline(false);
        this.setPreviousStatement(true, null);
        this.setNextStatement(true, null);
        this.setColour(180);
        this.setTooltip('');
        this.setHelpUrl('');
      },
    };
    /*    Blockly.inject(blocklyDiv, {
      readOnly: false,
      media: 'media/',
      trashcan: true,
      move: {
        scrollbars: true,
        drag: true,
        wheel: true,
      },

      toolbox: `
      <xml xmlns="https://developers.google.com/blockly/xml" id="toolbox-simple" style="display: none">
        <block type="controls_ifelse"></block>
        <block type="logic_compare"></block>
        <block type="moveForward"></block>
        <block type="moveBackward"></block>

        <block type="logic_operation"></block>
        <block type="controls_repeat_ext">
            <value name="TIMES">
                <shadow type="math_number">
                    <field name="NUM">10</field>
                </shadow>
            </value>
        </block>
        <block type="logic_operation"></block>
        <block type="logic_negate"></block>
        <block type="logic_boolean"></block>
        <block type="logic_null" disabled="true"></block>
        <block type="logic_ternary"></block>
        <block type="text_charAt">
            <value name="VALUE">
                <block type="variables_get">
                    <field name="VAR">text</field>
                </block>
            </value>
        </block>
      </xml>
        `,

    } as Blockly.BlocklyOptions);*/
    const toolbox = `<xml xmlns="https://developers.google.com/blockly/xml" id="toolbox-simple" style="display: none">
    <block type="controls_ifelse"></block>
    <block type="logic_compare"></block>
    <block type="moveForward"></block>
    <block type="moveBackward"></block>
    <block type="turn"></block>


    <block type="logic_operation"></block>
    <block type="controls_repeat_ext">
        <value name="TIMES">
            <shadow type="math_number">
                <field name="NUM">10</field>
            </shadow>
        </value>
    </block>
    <block type="logic_operation"></block>
    <block type="logic_negate"></block>
    <block type="logic_boolean"></block>
    <block type="logic_null" disabled="true"></block>
    <block type="logic_ternary"></block>
    <block type="text_charAt">
        <value name="VALUE">
            <block type="variables_get">
                <field name="VAR">text</field>
            </block>
        </value>
    </block>
  </xml>
    `;

    this.workspace = Blockly.inject('blocklyDiv', {
      toolbox,
      readOnly: false,
      media: 'media/',
      trashcan: true,
      move: {
        scrollbars: true,
        drag: true,
        wheel: true,
      },
    });

    this.workspace.addChangeListener(this.Update);
  }
  code2 = ((Blockly as any).JavaScript['moveForward'] = function (block) {
    // TODO: Assemble JavaScript into code variable.
    const instance = new Pahsertoblockly();

    var code = instance.jump();
    return code;
  });
  code3 = ((Blockly as any).JavaScript['moveBackward'] = function (block) {
    // TODO: Assemble JavaScript into code variable.
    var code = this.project.jump();
    return code;
  });
  code4 = ((Blockly as any).JavaScript['turn'] = function (block) {
    var dropdown_name = block.getFieldValue('NAME');
    // TODO: Assemble JavaScript into code variable.
    var code = 'turn' + dropdown_name + '();\n';
    return code;
  });
  Update(event) {
    let code = (Blockly as any).JavaScript.workspaceToCode(
      Blockly.mainWorkspace
    );
    document.getElementById('code').innerHTML = code;
    //  console.log(code);
  }
}



 <block type="controls_if"></block>
        <block type="logic_compare"></block>
        <block type="logic_operation"></block>
        <block type="logic_boolean"></block>
        <block name="Variables" custom="VARIABLE" colour="330"></block>

        <block type="controls_whileUntil"></block>
        <block type="controls_repeat_ext"></block>
        <block type="controls_for"></block>
            <block type="math_number"></block>
        <block type="math_arithmetic"></block>

    <block name="Functions" colour="290" custom="PROCEDURE"></block>
     <block type="text"></block>
        <block type="text_print"></block>





    if (this.player.x < 0) {
      this.player.x = 0;
    }

    if (this.player.x > 700) {
      this.player.x = 700;
    }
    if (this.player.x > 350) {
      this.move1()
    }
    if (this.player.x < 345) {
      this.move2()
    }
    if (this.player.y < 0) {
      this.player.y = 0;
    }
    if (this.player.y > 550) {
      this.player.y = 548 ;
    }if (this.player.y < 76) {
    this.move3()

    }
























//game6
import * as Blockly from 'blockly';
import 'phaser';
import block = Blockly.Tooltip.block;
import {BlocklyComponent} from "./blockly.component";
import LOGIC_BOOLEAN_TRUE = Blockly.Msg.LOGIC_BOOLEAN_TRUE;

var i=0;
var m ="";
export  class Scene4 extends Phaser.Scene {
  go:any;
  ok:any;
  stone:any;
  count:any;
  i:number=0;
  workspace:any;
  up:any;
  score1:any;
  lettuce:any;
  score:any;
  run:any;
  drop:any;
  arrow:any;
  arrowA:any;
  arrow2:any;
  arrow3:any;
  arrow4:any;
  player:any;
  player2:any;

  scoreText:any;
  right2:any;
  right3:any;


  l !:BlocklyComponent;

  constructor() {
    super('game4')

  }
  preload() {


    Blockly.Blocks['string_length'] = {
      init: function() {
        this.appendValueInput('VALUE')
          .setCheck('String')
          .appendField('stone');
        this.setOutput(true, 'Number');
        this.setColour(280);
        //this.setNextStatement(true);
        this.setTooltip('Returns number of letters in the provided text.');
        this.setHelpUrl('http://www.w3schools.com/jsref/jsref_length_string.asp');
      }
    };
    Blockly.Blocks['stone'] = {
      init: function() {
        this.appendValueInput("stone")
          .setCheck(null)
          .appendField("stone");
        this.setInputsInline(false);
        this.setOutput(true, 'Boolean');
        this.setColour(230);
        this.setTooltip("");
        this.setHelpUrl("");
      }
    };
    Blockly.Blocks['gridworld_gonorth'] = {
      init: function () {
        this.setColour(320);
        this.appendDummyInput()
          .appendField('Go east');
        this.setTooltip('Move right (towards the top of the screen)');
        this.setNextStatement(true);
        this.setPreviousStatement(true);
      }
    };
    Blockly.Blocks['gowest'] = {
      init: function () {
        this.setColour(320);
        this.appendDummyInput()
          .appendField('Go west');
        this.setTooltip('Move right (towards the top of the screen)');
        this.setNextStatement(true);
        this.setPreviousStatement(true);
      }
    };
    Blockly.Blocks['gridworld_gosouth'] = {
      init: function () {
        this.setColour(320);
        this.appendDummyInput()
          .appendField('Go north');
        this.setTooltip('Move south (towards the bottom of the screen)');
        this.setNextStatement(true);
        this.setPreviousStatement(true);
      }
    };
    Blockly.Blocks['goForword'] = {
      init: function () {
        this.setColour(320);
        this.appendDummyInput()
          .appendField('Go south');
        this.setTooltip('Move south (towards the bottom of the screen)');
        this.setNextStatement(true);
        this.setPreviousStatement(true);
      }
    };  Blockly.Blocks['jump'] = {
      init: function () {
        this.setColour(320);
        this.appendDummyInput()
          .appendField('jump');
        this.setTooltip('Move south (towards the bottom of the screen)');
        this.setNextStatement(true);
        this.setPreviousStatement(true);
      }
    };
    Blockly.Blocks['turn'] = {
      init: function() {
        this.appendDummyInput()
          .appendField(new Blockly.FieldLabelSerializable("turn"), "NAME")
          .appendField(new Blockly.FieldDropdown([["left","turnLeft"], ["right","turn right"]]), "turn");
        this.setColour(230);
        this.setTooltip("");
        this.setHelpUrl("");
      }
    };

    (Blockly as any).JavaScript['gridworld_gonorth'] = function (block ) {



      return 'this.GoEast();';
    };
    (Blockly as any).JavaScript['gowest'] = function (block ) {



      return 'this.gowest();';
    };
    (Blockly as any).JavaScript['jump'] = function (block ) {



      return 'this.jump();';
    };
    (Blockly as any).JavaScript['goForword'] = function (block ) {



      return 'this.goSouth();';
    };
    (Blockly as any).JavaScript['stone'] = function (block ) {



      return 'this.stone;';
    };




    (Blockly as any).JavaScript['turn'] = function (block ) {



      return 'turn();';
    };

    (Blockly as any).JavaScript['gridworld_gosouth'] = function (block) {



      return 'this.GoNorth();';
    };

    Blockly.defineBlocksWithJsonArray([{
      "type": "wait_seconds",
      "message0": " wait %1 seconds",
      "args0": [{
        "type": "field_number",
        "name": "SECONDS",
        "min": 0,
        "max": 600,
        "value": 1
      }],
      "previousStatement": null,
      "nextStatement": null,
      "colour": "%{BKY_LOOPS_HUE}"
    }]);

    /**
     * Generator for wait block creates call to new method
     * <code>waitForSeconds()</code>.
     */
    (Blockly as any).JavaScript['wait_seconds'] = function(block) {
      var seconds = Number(block.getFieldValue('SECONDS'));
      var code = 'this.waitForSeconds(' + seconds + ');\n';
      return code;
    };
let that= this;
this.stone=false;












    const blocklyDiv : any = document.getElementById('blocklyDiv3');
    this.workspace=  Blockly.inject(blocklyDiv, {
      readOnly: false,
      media: 'media/',
      trashcan: true,
      move: {
        scrollbars: true,
        drag: true,
        wheel: true
      },
      toolbox: `
      <xml xmlns="https://developers.google.com/blockly/xml" id="toolbox-simple" style="display: none" class="col-6">
        <div class="col-6"></div>
      <block type="controls_repeat_ext">
        <value name="TIMES">
            <shadow type="math_number">
                <field name="NUM">0</field>
            </shadow>
        </value>
    </block>
        <block type="gridworld_gosouth"></block>
        <block type="goForword"></block>
        <block type="gowest"></block>
        <block type="gridworld_gonorth"></block>
        <block type="controls_if"></block>

        <block type="jump"></block>
        <block type="stone"></block>


      </xml>
        `, zoom:
        {controls: true,
          wheel: true,
          startScale: 1.0,
          maxScale: 3,
          minScale: 0.3,
          scaleSpeed: 1.2,
        },
      grid:
        {spacing: 20,
          length: 3,
          colour: '#ccc',
          snap: true},

    } );
    this.workspace.addChangeListener(this.test1);

     this.load.image('sahara', 'assets/tileset7.png');
     this.load.image('sahara2', 'assets/tileset7.png');
    this.load.image('player', 'assets/face.png');
    this.load.image('player2', 'assets/left.png');
    this.load.image('playerWest', 'assets/right.png');
    this.load.image('playerNorth', 'assets/back.png');
    this.load.image('happy', 'assets/hqppy.png');
    this.drop= this.load.image('drop', 'assets/drop.png');
    this.arrow=this.load.image('right', 'assets/arrow.png');
    this.arrow2=this.load.image('down', 'assets/arrowDown.png');
    this.arrow3=this.load.image('left', 'assets/arrowleft.png');
    this.arrow4=this.load.image('up', 'assets/arrowUp.png');
    this.load.image('title', 'assets/title.png');
    this.load.image('run', 'assets/run.png');
    this.load.image('lettuce', 'assets/goldA.png');
    this.load.image('score1', 'assets/score.png');
    this.load.image('block', 'assets/block.png');
    this.load.image('blockk', 'assets/blockk.png');
    this.load.image('compass', 'assets/compass.png');



  }
  create() {
   // this.closeGameOve();
    this.arrow = this.input.keyboard.createCursorKeys();



    this.arrowA = this.input.keyboard.createCursorKeys();
    this.anims.create({

      frames: this.anims.generateFrameNumbers('brawler', { frames: [ 0, 1, 2, 3 ] }),
      frameRate: 8,
      repeat: -1
    });
    //this.add.text(20, 20, 'Loading..');
    const  event = Phaser.Input.Events;
    const sahara2 = this.add.image( 420,  305, 'sahara2');
    sahara2.scale = 1.1;
    //sahara2.rotation -= 90;
    const sahara = this.add.image( 330,  240, 'sahara');
   sahara.scale = 1.1;
  //  sahara.rotation -= 0.200;

   // this.player = this.physics.add.sprite(349, 53, 'player2');
    this.player = this.physics.add.sprite(240, 306, 'player2');
   // this.player = this.physics.add.sprite(215, 403, 'player2');
    this.player.scale = 1.7;
    var that= this;
    const compass =this.add.image( 690,  50, 'compass');
    compass.scale = 0.25;
    this.lettuce = this.physics.add.sprite(230, 430, 'lettuce');
    this.lettuce.setScale(.32);
    this.tweens.add({
      targets: this.lettuce, // on the player
      duration: 400, // for 200ms
      scaleX: .3, // that scale vertically by 20%
      scaleY: .3, // and scale horizontally by 20%
      yoyo: true, // at the end, go back to original scale
    });
    var b=[] as any;

    const run= this.physics.add.sprite(730, 500, 'run').setInteractive();

    run.scale = 0.25;
    run.on(event.POINTER_DOWN ,(image) => {

                            (Blockly as any).JavaScript.addReservedWords('div3');
                            var code = (Blockly as any).JavaScript.workspaceToCode();
                           console.log(that.stone);
                            let me;
                                  me= document.getElementById('code').innerText ;
                                   const myArr1 = code.split(");");
                                   let code1= myArr1[0];
                                  const code2 = myArr1[myArr1.length-1];
                                  console.log("code2 = "+code2 + code2.length);

                                  let ok='); await this.waitfunction(500);';
                            let text3=code1.concat(ok);
                            //console.log(text3);
                            let text4="";
                            for (var i=0; i<myArr1.length-1;i++){

                            let tex=
                          myArr1[i].concat(ok);
                      b[i]=tex;
                      //console.log("here is :"+tex);

                      }
                      for (var i=0; i<b.length;i++){
                         text4=text4.concat(b[i]);

                      }let text5;
                            if (code2.length == 2 && code2.includes('}')){console.log("ni ntestii fi hadi");

                                       text5=   text4.concat('}');
                            }else {

                              text5=text4;
                              console.log(text5);
                            }

                              // this.waitfunction(500)  if (me  == you ){ console.log(" we are equals" )}else {console.log(" we not equals"+me)}
                              this.correct(me);
                              //  this.correct(me);
                              try {
                                console.log("text5 "+ text5);
                                eval("(async () => {"+text5+"})()");

                              } catch (e) {
                                alert(e);
                              }

    });

    this.score1 = this.physics.add.sprite(60, 60, 'score1');

    this.score1.setScale(0.2);

    this.score = 20;
    let style = { font: '30px Arial', fill: '#00000' };
    // Parameters: x position, y position, text, style
    this.scoreText = this.add.text(45, 54,   this.score, style);

    this.scoreText.setScale(0.85);


  }



  hit(){
    // Change the position x and y of the coin randomly
    // this.lettuce.x = Phaser.Math.Between(100, 600);
    //this.lettuce.y = Phaser.Math.Between(100, 300);
    this.lettuce.destroy(true);
    // this.player.destroy(true);
    // Increment the score by 10
    this.score += 10;
    // this.player2 = this.physics.add.sprite(500, 338, 'happy');
    //this.player2.scale = 0.3;

    // Display the updated score on the screen
    this.scoreText.setText( this.score);

    // Create a new tween Ykbr ki yakol
    this.tweens.add({
      targets: this.player, // on the player
      duration: 200, // for 200ms
      scaleX: 0.5, // that scale vertically by 20%
      scaleY: 0.5, // and scale horizontally by 20%
      yoyo: true, // at the end, go back to original scale
    });

  }


sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async demo() {
    console.log('Taking a break...');
    await this.sleep(2000);
    console.log('Two seconds later, showing sleep in a loop...');

  }

 goSouth(){
    this.player.y += 70;
  }
  GoNorth(){
      this.player.y -= 70;
  }
  async jump(){

    this.player.y -= 50;
    this.player.x += 50;
    await this.waitfunction(100);
    this.player.y += 50;
    this.player.x += 50;
  }



 async GoEast(){
    this.player.x += 70;
    console.log(this.player.x);
}
 async gowest(){
    this.player.x -= 70;
  }
  upfunction(){
    this.player.y -= 70;
    console.log("done go");}

  waitfunction(ms){

    return new Promise(resolve => {
      setTimeout(()=>resolve(''),ms)
    });
  }

  async  move1(){
    this.player.x = 357;
    await this.waitfunction(50);
    // this.player.x = 350;

  }

  async  move2(){
    this.player.x = 343;
    await this.waitfunction(50);
    this.player.x = 347;

  }
  async  move3(){
    this.player.y = 73 ;
    await this.waitfunction(50);
    this.player.y = 76;

  }
  waitForSeconds(){

  }
 initInterpreterWaitForSeconds(interpreter, globalObject) {
    // Ensure function name does not conflict with variable names.
    (Blockly as any).JavaScript.addReservedWords('this.waitForSeconds');



  }

  async wait(ms){
    await this.waitfunction(ms);
  }

  update() {
    console.log('update method');
   // console.log(this.player.x + " "+ this.player.y);
    if (this.arrow.right.isDown) {
      // If the right arrow is pressed, move to the right
      this.player.x += 3;
    } else if (this.arrow.left.isDown) {
      // If the left arrow is pressed, move to the left
      this.player.x -= 3;
    }

// Do the same for vertical movements
    if (this.arrow.down.isDown) {
      this.player.y += 3;
    } else if (this.arrow.up.isDown) {
      this.player.y -= 3;
    }


    if (this.player.x < 0) {
      this.player.x = 0;
    }

    if (this.player.x > 700) {
      this.player.x = 700;
    }
    if (this.player.y > 480) {
      this.player.y = 470;
    }

    if (this.player.y < 56) {
      this.player.y = 54;
    }
    if ((this.player.x > 370 && this.player.x < 450) && this.player.y == 306) {
      this.stone==true;
      console.log("your stone is true");
    }
/*
    if (this.player.x > 215 && this.player.x <395 && this.player.y < 403   ) {

      this.player.x = this.player.x-2;
      this.player.y = 406;

    }
    if (this.player.x > 215 && this.player.x <395 && this.player.y > 451   ) {

      this.player.x = this.player.x-2;
      this.player.y = 448;

    }
*/

    if (this.physics.overlap(this.player, this.lettuce)) {
      // Call the new hit() method
      console.log("hitted");
      this.hit();


    }

  }

  correct(code){

    console.log("ni dkhalt hna");
    var you ="for (var count = 0; count < 4; count++) { this.GoEast();} for (var count2 = 0; count2 < 3; count2++) { this.GoNorth();}";
    var you2 ="for (var count = 0; count < 4; count++) { this.GoEast();} for (var count2 = 0; count2 < 4; count2++) { this.GoNorth();}";

    if (code == you || code == you2){

      this.time.addEvent({
        delay:3500,
        callback : this.gameOver,
        callbackScope : this
      });

    }else {console.log("no not today");

    }
  }

  test1(event ) {

    // (Blockly as any).JavaScript.addReservedWords('code');
    var code= (Blockly as any).JavaScript.workspaceToCode(Blockly.mainWorkspace);
    // var myInterpreter = new Interpreter(code);
    document.getElementById('code')!.innerHTML = code;

    console.log(code);

  }


  closeGameOve(){
    this.scene.stop('repeat');
    document.getElementById('div2').style.display = "none";
    document.getElementById('code').innerHTML! = "";
    console.log("hello game6");

  }



  gameOver(){

    this.scene.launch('gameOver', {score: this.score,name:"repeat"});

  } gamelose(){

    this.scene.launch('gameOver', {score: this.score,name:"gameLose2"});

  }
}




