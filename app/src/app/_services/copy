import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
const AUTH_API = 'http://localhost:8881/api/auth/';
const AUTH_API_GATEWAY = 'http://localhost:7777/ms-authentification/api/auth/';
const AUTH_API_GATEWAY2 = 'http://192.168.1.30:7777/ms-authentification/api/auth/';
const AUTH_API_GATEWAY3 = 'http://192.168.1.6:7777/ms-authentification/api/auth/';
const AUTH_API2 = 'http://192.168.1.29:8881/api/auth/';
const AUTH_API3 = 'http://192.168.1.7:8881/api/auth/';

const httpOptions = {
  headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
};


@Injectable({
  providedIn: 'root',
})
export class AuthService {
  constructor(private http: HttpClient) {}

  login(username: string, password: string): Observable<any> {
    return this.http.post(
      AUTH_API_GATEWAY3 + "signin",
      {
        username,
        password,
      },
      httpOptions
    );
  }
  register(
    username: string,
    email: string,
    password: string,
    age: number,
    experience: string,
    nomenfant: string
  ): Observable<any> {
    return this.http.post(
      AUTH_API_GATEWAY + "signup/parent",
      {
        username,
        email,
        password,
        experience,
        age,
        nomenfant,
      },
      httpOptions
    );
  } /*
  registerchild(
    username: string,
    email: string,
    password: string,
    age: number
  ): Observable<any> {
    return this.http.post(
      AUTH_API + 'signup/child',
      {
        username,
        email,
        password,
        age,
      },
      httpOptions
    );
  }*/
  registerchild(data: any): Observable<any> {
    return this.http.post(
      AUTH_API + "signup/child",

      data
    );
  }
  resetpassword(email: string): Observable<any> {
    return this.http.post(
      "http://localhost:8881/api/auth/forgetpassword",
      {
        email,
      },

      httpOptions
    );
  }

  sendscore(
    id: string,
    nom: string,
    points: number,
    points2: number,
    points_sequencing_blockly: number,
    points_loop_blockly: number,
    points_condition_blockly: number
  ): Observable<any> {
    return this.http.post("http://192.168.1.6:7777/ms-learning/api/test/info", {
      id,
      nom,
      points,
      points2,
      points_sequencing_blockly,
      points_loop_blockly,
      points_condition_blockly,
    });
  }

  initialize(id: string): Observable<any> {
    return this.http.post('http://192.168.1.6:8882/api/test/initialize/' + id, {
      id,
    });
  }

  resetpasswordfinal(resetPasswordToken: string): Observable<any> {
    return this.http.post(
      "http://localhost:8881/api/auth/reset_password",
      {
        resetPasswordToken,
      },

      httpOptions
    );
  }
}














//token
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { Parent } from '../parent';
import { map } from 'rxjs/operators';
const TOKEN_KEY = 'auth-token';
const USER_KEY = 'auth-user';
@Injectable({
  providedIn: 'root',
})
export class TokenStorageService {
  currentUser: any;

  constructor(private http: HttpClient) {
    window.sessionStorage.getItem(USER_KEY);
    console.log();
  }

  signOut(): void {
    window.sessionStorage.clear();
  }

  public saveToken(token: string): void {
    window.sessionStorage.removeItem(TOKEN_KEY);
    window.sessionStorage.setItem(TOKEN_KEY, token);
  }

  public getToken(): string | null {
    return window.sessionStorage.getItem(TOKEN_KEY);
  }

  public saveUser(user: any): void {
    window.sessionStorage.removeItem(USER_KEY);
    window.sessionStorage.setItem(USER_KEY, JSON.stringify(user));
  }

  public getUser(): any {
    const user = window.sessionStorage.getItem(USER_KEY);
    if (user) {
      return JSON.parse(user);
    }

    return {};
  }
  /*  public getParent(user: any) {
    return this.http.get('http://localhost:8881/api/test/' + user.id);
  }*/
  getinfo(): Observable<any> {
    this.currentUser = this.getUser();
    return this.http.get(
      'http://192.168.1.30:8881/api/test/' + this.currentUser.email
    );
  }
  getAll(): Observable<any> {
    return this.http.get('http://192.168.1.30:8881/api/test/allparents');
    //  .pipe(map((response) => response._embedded.parent));
  }
}
interface GetResponse {
  _embedded: {
    parent: Parent[];
  };
}
